/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avroschema;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Token extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Token\",\"namespace\":\"avroschema\",\"fields\":[{\"name\":\"pos\",\"type\":\"string\"},{\"name\":\"ner\",\"type\":\"string\"},{\"name\":\"t_span\",\"type\":{\"type\":\"record\",\"name\":\"Span\",\"fields\":[{\"name\":\"start_index\",\"type\":\"int\"},{\"name\":\"end_index\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence pos;
  @Deprecated public java.lang.CharSequence ner;
  @Deprecated public avroschema.Span t_span;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Token() {}

  /**
   * All-args constructor.
   */
  public Token(java.lang.CharSequence pos, java.lang.CharSequence ner, avroschema.Span t_span) {
    this.pos = pos;
    this.ner = ner;
    this.t_span = t_span;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pos;
    case 1: return ner;
    case 2: return t_span;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pos = (java.lang.CharSequence)value$; break;
    case 1: ner = (java.lang.CharSequence)value$; break;
    case 2: t_span = (avroschema.Span)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pos' field.
   */
  public java.lang.CharSequence getPos() {
    return pos;
  }

  /**
   * Sets the value of the 'pos' field.
   * @param value the value to set.
   */
  public void setPos(java.lang.CharSequence value) {
    this.pos = value;
  }

  /**
   * Gets the value of the 'ner' field.
   */
  public java.lang.CharSequence getNer() {
    return ner;
  }

  /**
   * Sets the value of the 'ner' field.
   * @param value the value to set.
   */
  public void setNer(java.lang.CharSequence value) {
    this.ner = value;
  }

  /**
   * Gets the value of the 't_span' field.
   */
  public avroschema.Span getTSpan() {
    return t_span;
  }

  /**
   * Sets the value of the 't_span' field.
   * @param value the value to set.
   */
  public void setTSpan(avroschema.Span value) {
    this.t_span = value;
  }

  /** Creates a new Token RecordBuilder */
  public static avroschema.Token.Builder newBuilder() {
    return new avroschema.Token.Builder();
  }
  
  /** Creates a new Token RecordBuilder by copying an existing Builder */
  public static avroschema.Token.Builder newBuilder(avroschema.Token.Builder other) {
    return new avroschema.Token.Builder(other);
  }
  
  /** Creates a new Token RecordBuilder by copying an existing Token instance */
  public static avroschema.Token.Builder newBuilder(avroschema.Token other) {
    return new avroschema.Token.Builder(other);
  }
  
  /**
   * RecordBuilder for Token instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Token>
    implements org.apache.avro.data.RecordBuilder<Token> {

    private java.lang.CharSequence pos;
    private java.lang.CharSequence ner;
    private avroschema.Span t_span;

    /** Creates a new Builder */
    private Builder() {
      super(avroschema.Token.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avroschema.Token.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pos)) {
        this.pos = data().deepCopy(fields()[0].schema(), other.pos);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ner)) {
        this.ner = data().deepCopy(fields()[1].schema(), other.ner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.t_span)) {
        this.t_span = data().deepCopy(fields()[2].schema(), other.t_span);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Token instance */
    private Builder(avroschema.Token other) {
            super(avroschema.Token.SCHEMA$);
      if (isValidValue(fields()[0], other.pos)) {
        this.pos = data().deepCopy(fields()[0].schema(), other.pos);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ner)) {
        this.ner = data().deepCopy(fields()[1].schema(), other.ner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.t_span)) {
        this.t_span = data().deepCopy(fields()[2].schema(), other.t_span);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'pos' field */
    public java.lang.CharSequence getPos() {
      return pos;
    }
    
    /** Sets the value of the 'pos' field */
    public avroschema.Token.Builder setPos(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.pos = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pos' field has been set */
    public boolean hasPos() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pos' field */
    public avroschema.Token.Builder clearPos() {
      pos = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ner' field */
    public java.lang.CharSequence getNer() {
      return ner;
    }
    
    /** Sets the value of the 'ner' field */
    public avroschema.Token.Builder setNer(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ner = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ner' field has been set */
    public boolean hasNer() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ner' field */
    public avroschema.Token.Builder clearNer() {
      ner = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 't_span' field */
    public avroschema.Span getTSpan() {
      return t_span;
    }
    
    /** Sets the value of the 't_span' field */
    public avroschema.Token.Builder setTSpan(avroschema.Span value) {
      validate(fields()[2], value);
      this.t_span = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 't_span' field has been set */
    public boolean hasTSpan() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 't_span' field */
    public avroschema.Token.Builder clearTSpan() {
      t_span = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Token build() {
      try {
        Token record = new Token();
        record.pos = fieldSetFlags()[0] ? this.pos : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ner = fieldSetFlags()[1] ? this.ner : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.t_span = fieldSetFlags()[2] ? this.t_span : (avroschema.Span) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
